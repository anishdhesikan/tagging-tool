
const desiredWidth = 800;
var maxWidth = 800;
var maxHeight = 550;
const tag1Source = "../images/tag1.svg";
var scaleFactor;
var canvas;
var hoveredItem, selectedItem;
var groupItems = [];
var watermarkGroup;
var deleteButton;

var isDown;
var editingText;

// Platform detection.
var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

// Start image loader.
var imageLoader = document.getElementById('imageLoader');
imageLoader.addEventListener('change', handleImage, false);

function handleImage(e){
  var loadingImage = loadImage(
    e.target.files[0],
    function(img, data) {
      console.log(img)
      var fabricImg = new Image();
      fabricImg.onload = function(){
        initializeCanvas();
        initializeBackgroundImage(fabricImg);
      }
      fabricImg.src = img.toDataURL();
    },
    { meta: true, canvas: true }
  );
}

function clearCanvasContainer() {
  if (canvas) {
    var myNode = document.getElementById("canvasContainer");
    while (myNode.firstChild) {
      myNode.removeChild(myNode.firstChild);
    }
  }
}

function initializeCanvas() {
  clearCanvasContainer();
  document.body.addEventListener('click', deselectAllHandler, true); 
  document.getElementById("saveImage").style.display = "block";
  var newCanvas = document.createElement("canvas");
  newCanvas.id = "c";
  document.getElementById("canvasContainer").appendChild(newCanvas);
  canvas = new fabric.Canvas(newCanvas.id, { selection: false });
  var containerWidth = document.getElementById('canvasContainer').offsetWidth; // width of inner container generated by fabric.
  if (containerWidth < maxWidth) {
    maxWidth = containerWidth;
  }

  initializeCanvasSelectionEvents();
  initializeCanvasMouseEvents();
  initializeKeyEvents();
}

function initializeCanvasSelectionEvents() {
  canvas.on("selection:created", function(e) {
    onSelected(e.target);
  });
  canvas.on("selection:updated", function(e) {
    onSelected(e.target);
  });
  canvas.on("selection:cleared", function(e) {
    onDeselected(e.target);
  });
  canvas.on('object:moving', function(e) {
    removeDeleteButton();
  });
  canvas.on('object:rotating', function(e) {
    removeDeleteButton();
  });
  canvas.on('object:scaling', function(e) {
    removeDeleteButton();
  });
  canvas.on('object:modified', function(e) {
    if (selectedItem == e.target) {
      onSelected(e.target);
    }
  });
}

function onSelected(obj) {
  if (obj.id == "deleteButton") {
    removeDeleteButton();
    if (selectedItem) {
      canvas.remove(selectedItem).renderAll();
      selectedItem = null;
    }
    return;
  }
  if (editingText) {
    removeDeleteButton();
    return;
  }

  selectedItem = obj;
  removeDeleteButton();
  const textboxWidth = 50;
  const textboxFontSize = 20;
  deleteButton = new fabric.Textbox("\u2716", {
    width: textboxWidth,
    textAlign: "center",
    top: selectedItem.top - 25,
    left: selectedItem.left - textboxWidth / 2 + textboxFontSize / 4,
    fontWeight: 'normal',
    fontFamily: 'Helvetica Neue',
    fontSize: textboxFontSize,
    fill: "white",
    opacity: 1,
    excludeFromExport: true,
    id: "deleteButton"
  });
  deleteButton.setShadow({
    color: 'rgba(0, 0, 0, 0.2)',
    blur: 0,
    offsetX: 1 * getCanvasProportion(),
    offsetY: 1 * getCanvasProportion()
  });
  canvas.add(deleteButton).renderAll();
}

function onDeselected(obj) {
  removeDeleteButton();
}

function removeDeleteButton() {
  if (deleteButton) {
    canvas.remove(deleteButton).renderAll();
    deleteButton = null;
  }
}

function initializeCanvasMouseEvents() {
  canvas.on('mouse:down', function(o){
    if (o.target) {
      // touching a fabric object.
      if (editingText && o.target != editingText) {
        deselectAll();
        editingText.exitEditing();
        regroup();
        return;
      }
    } else {
      // touching background.
      if (editingText) {
        deselectAll();
        editingText.exitEditing();
        regroup();
        return;
      }
      if (selectedItem) {
        deselectAll();
        return;
      }
      var pointer = canvas.getPointer(o.e);
      addTagGroup(pointer.x, pointer.y);
    }
    isDown = true;
  });
}

function initializeBackgroundImage(img) {
  updateScaleFactor(img);
  canvas.setDimensions({width: img.width / scaleFactor, 
            height: img.height / scaleFactor});
  var imgInstance = new fabric.Image(img, {
    left: 0,
    top: 0,
    angle: 0,
    opacity: 1,
  });
  imgInstance.scaleToWidth(img.width / scaleFactor);
  imgInstance.scaleToHeight(img.height / scaleFactor);
  canvas.setBackgroundImage(imgInstance);
  initializeWatermark(img);
}

function initializeWatermark(img) {
  const watermarkWidth = 200;
  const watermarkPaddingRight = 10;
  var watermark1 = new fabric.Textbox("Image tagged using", {
    width: watermarkWidth,
    textAlign: "right",
    top: canvas.height - 57,
    left: canvas.width - watermarkWidth - watermarkPaddingRight,
    fontWeight: 'normal',
    fontFamily: 'Helvetica Neue',
    fontSize: 14,
    fill: "white",
    opacity: 0.7,
    selectable: false,
    evented: false
  });
  var watermark2 = new fabric.Textbox("NISHMAN TAGGER", {
    width: watermarkWidth,
    textAlign: "right",
    top: canvas.height - 40,
    left: canvas.width - watermarkWidth - watermarkPaddingRight,
    fontWeight: 'bold',
    fontFamily: 'Helvetica Neue',
    fontSize: 18,
    fill: "white",
    opacity: 0.7,
    selectable: false,
    evented: false
  });
  var watermark3 = new fabric.Textbox("www.nishman.dev", {
    width: watermarkWidth,
    textAlign: "right",
    top: canvas.height - 20,
    left: canvas.width - watermarkWidth - watermarkPaddingRight,
    fontWeight: 'bold',
    fontFamily: 'Helvetica Neue',
    fontSize: 14,
    fill: "white",
    opacity: 0.7,
    selectable: false,
    evented: false
  });
  watermarkGroup = new fabric.Group([watermark1, watermark2, watermark3]);
  watermarkGroup.set({
    id: "watermark",
    selectable: false,
    evented: false});
  watermarkGroup.setShadow({
    color: 'rgba(0, 0, 0, 0.2)',
    blur: 0,
    offsetX: 1 * getCanvasProportion(),
    offsetY: 1 * getCanvasProportion()
  });
  canvas.add(watermarkGroup).renderAll();
}

function initializeKeyEvents()
{
  addEventListener('keydown', function(event) {
      const key = event.key;
      if (key === "Backspace" || key === "Delete") {
        if (!editingText && canvas.getActiveObject()) {
          deleteActiveObject();
        }
      }
  });
}

function deleteActiveObject() {
  if (hoveredItem == canvas.getActiveObject()) {
    hoveredItem = null;
    selectedItem = null;
  }
  canvas.remove(canvas.getActiveObject());
}

function createEditableGroup(elements) {
  var newGroup = new fabric.Group(elements, {
    subTargetCheck: true
  });
  newGroup.set({lockUniScaling: true, 
    lockScalingFlip: true,
    borderColor: "#DDD",
    borderOpacityWhenMoving: 0.7,
    cornerColor: "#FFF",
    cornerStrokeColor: "#CCC",
    cornerSize: 10,
    transparentCorners: false});
  newGroup.on(
      "mousedown",
      function(event) {
        fabricDblClick(newGroup, obj => {
          setNearestTextEditing(obj, event);
        })();
      }
  );
  newGroup.setControlsVisibility({'tl': false});
  return newGroup;
}

function setNearestTextEditing(obj, event) {
  ungroup(obj);
  var pointer = canvas.getPointer(event.e);
  var posX = pointer.x;
  var posY = pointer.y;

  var minDistance;
  nearestText = null;
  obj.getObjects().forEach(item => {
      if (item.type === "i-text" || item.type === "textbox") {
        var dist = getDistance(posX, posY, item.getCenterPoint().x, item.getCenterPoint().y);
        if (!minDistance || dist < minDistance) {
          minDistance = dist;
          nearestText = item;
        }
      }
  });

  editingText = nearestText;
  canvas.setActiveObject(nearestText);
  nearestText.enterEditing();
  nearestText.selectAll();
  canvas.renderAll();
}

function addTagGroup(xPos, yPos) {
  var textbox1 = new fabric.Textbox('Item name', {
    width: 100,
    left: -38, 
    top: -2,
    textAlign: "center",
    fontFamily: "Helvetica Neue",
    fontWeight: "Bold",
    fontSize: 16,
    originX: 'center',
    originY: 'center',
    selectable: false,
    cursorWidth: 1,
    cursorDuration: 200,
    cursorDelay: 1300,
    fill: "#333",
    lineHeight: 0.8
  });
  var textbox2 = new fabric.Textbox('$50', {
    width: 65,
    left: 50, 
    top: -2,
    textAlign: "center",
    fontFamily: "Helvetica Neue",
    fontWeight: "Bold",
    fontSize: 22,
    originX: 'center',
    originY: 'center',
    selectable: false,
    splitByGrapheme: true,
    cursorWidth: 1,
    cursorDuration: 200,
    cursorDelay: 1300,
    fill: "#333"
  });
  fabric.Image.fromURL(tag1Source, (tagImg) => {
    tagImg.scaleToHeight(70);
    tagImg.scaleToWidth(250);
    tagImg.set({left: -20, 
      top: 4, 
      opacity: 0.97, 
      originX: 'center', 
      originY: 'center', 
      selectable: false});
    var group = createEditableGroup([ tagImg, textbox1, textbox2 ]);
    scaleObjectProportionally(group, xPos, yPos);
    canvas.add(group).setActiveObject(group).requestRenderAll();
    group.set({opacity: 0});
    group.animate('opacity', 1, {
      onChange: canvas.renderAll.bind(canvas),
      duration: 200,
      easing: fabric.util.ease.easeOutQuad
    });
    if (!isTouchDevice()) {
      hoveredItem = group;
    }
    canvas.bringToFront(watermarkGroup);
  }, {crossOrigin: 'anonymous'});
}

// Scale object proportionally to the width of the canvas.
function scaleObjectProportionally(obj, xPos, yPos) {
  var proportion = getCanvasProportion();
  console.log(proportion);
  obj.set({
    scaleX: obj.scaleX * proportion,
    scaleY: obj.scaleY * proportion,
    left: xPos - 125 * proportion, 
    top: yPos - 35 * proportion
  })
}

function getCanvasProportion() {
  return maxWidth / desiredWidth;
}

function ungroup(group) {
  groupItems = group._objects;
  group._restoreObjectsState();
  canvas.remove(group);
  for (var i = 0; i < groupItems.length; i++) {
    canvas.add(groupItems[i]);
  }
  canvas.renderAll();
};

function regroup() {
  if (!editingText) {
    return;
  }
  editingText = null;
  var items = [];
  groupItems.forEach(function(obj) {
    items.push(obj);
    canvas.remove(obj);
  });
  var newGroup = createEditableGroup(items);
  canvas.add(newGroup);
}

function updateScaleFactor(img) {
  widthScale = img.width / maxWidth;
  heightScale = img.height / maxHeight;
  if (widthScale >= heightScale) {
    scaleFactor = widthScale;
  } else {
    scaleFactor = heightScale;
  }
}

// Start image saver.
function getCanvasData() {
  var mult = scaleFactor < 1 ? 1 : scaleFactor;
  var data = canvas.toDataURL({
      format: 'png',
    multiplier: mult
  });

  return data;
};

function getCanvasBlob() {
    var data = getCanvasData().replace("data:image/png;base64,", "");
    var blob = b64toBlob(data, 'image/png');
    var blobUrl = URL.createObjectURL(blob);

    return blobUrl;
};

function saveImage() {
  updateSaveButtonStyle();
  deselectAll();
  var file_path = getCanvasBlob();
  var a = document.createElement('A');
  a.href = file_path;
  if (iOS) {
    target="_blank"
  } else {
    a.download = 'taggedImage.png';
  }
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}

function updateSaveButtonStyle() {
  var saveButton = document.getElementById("saveImage");
  var downloadingButton = document.getElementById("downloadingButton");
  saveButton.style.display = "none";
  downloadingButton.style.display = "block";
  setTimeout(function() {
    saveButton.style.display = "block";
    downloadingButton.style.display = "none";
  }, 4000);
}

// Utility functions.
// Double-click event handler
const fabricDblClick = function(obj, handler) {
  return function() {
    if (obj.clicked) handler(obj);
    else {
      obj.clicked = true;
      setTimeout(function() {
        obj.clicked = false;
      }, 500);
    }
  };
};

function getDistance(pos1x, pos1y, pos2x, pos2y) {
  return Math.abs(pos1x - pos2x) + Math.abs(pos1y - pos2y);
}

function deselectAllHandler(e) {
  if (e.target.nodeName != "CANVAS") {
    deselectAll();
  }
}

function deselectAll() {
  canvas.discardActiveObject();
  canvas.renderAll();
  selectedItem = null;
}

const b64toBlob = (b64Data, contentType='', sliceSize=512) => {
    const byteCharacters = atob(b64Data);
    const byteArrays = [];
 
    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);
 
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
 
        const byteArray = new Uint8Array(byteNumbers);
 
        byteArrays.push(byteArray);
    }
 
    const blob = new Blob(byteArrays, {type: contentType});
    return blob;
}

//**blob to dataURL**
function blobToDataURL(blob, callback) {
    var a = new FileReader();
    a.onload = function(e) {callback(e.target.result);}
    a.readAsDataURL(blob);
}

function isTouchDevice() {
 return (('ontouchstart' in window)
      || (navigator.MaxTouchPoints > 0)
      || (navigator.msMaxTouchPoints > 0));
}
